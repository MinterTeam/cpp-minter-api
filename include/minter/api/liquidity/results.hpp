#ifndef GEN_LIQUIDITY_RESULTS
#define GEN_LIQUIDITY_RESULTS

// AUTOGENERATED header. DO NOT modify manually.
//
#include "minter/api/liquidity/base.h"

#include <minter/minter_tx_config.h>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace minter {
namespace liquidity {

struct bip_price {
    uint64_t price;
    uint64_t btc_price;
    uint64_t average_trades_price;
    std::string next_update;
    float delta;
};
inline void from_json(const nlohmann::json& j, ::minter::liquidity::bip_price& resp) {
    if (j.find("price") != j.end() && !j.at("price").is_null())
        j.at("price").get_to<uint64_t>(resp.price);
    if (j.find("btc_price") != j.end() && !j.at("btc_price").is_null())
        j.at("btc_price").get_to<uint64_t>(resp.btc_price);
    if (j.find("average_trades_price") != j.end() && !j.at("average_trades_price").is_null())
        j.at("average_trades_price").get_to<uint64_t>(resp.average_trades_price);
    if (j.find("next_update") != j.end() && !j.at("next_update").is_null())
        j.at("next_update").get_to<std::string>(resp.next_update);
    if (j.find("delta") != j.end() && !j.at("delta").is_null())
        j.at("delta").get_to<float>(resp.delta);
}
inline void to_json(nlohmann::json& j, const ::minter::liquidity::bip_price& resp) {
    j = nlohmann::json{
        {"price", resp.price},
        {"btc_price", resp.btc_price},
        {"average_trades_price", resp.average_trades_price},
        {"next_update", resp.next_update},
        {"delta", resp.delta},
    };
}

} // namespace liquidity
} // namespace minter

#endif
