#ifndef GEN_GATE_RESULTS
#define GEN_GATE_RESULTS

// AUTOGENERATED header. DO NOT modify manually.
//
#include "minter/api/explorer/base.h"
#include "minter/api/gate/base.h"

#include <minter/address.h>
#include <minter/hash.h>
#include <minter/minter_tx_config.h>
#include <minter/public_key.h>
#include <minter/tx/tx_type.h>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace minter {
namespace gate {

struct gas_value : public minter::gate::result {
    dev::bigint gas;
};
struct price_commissions : public minter::gate::result {
    minter::explorer::coin_item_base coin;
    dev::bigint payload_byte;
    dev::bigint send;
    dev::bigint buy_bancor;
    dev::bigint sell_bancor;
    dev::bigint sell_all_bancor;
    dev::bigint buy_pool_base;
    dev::bigint sell_pool_base;
    dev::bigint sell_all_pool_base;
    dev::bigint buy_pool_delta;
    dev::bigint sell_pool_delta;
    dev::bigint sell_all_pool_delta;
    dev::bigint create_ticker3;
    dev::bigint create_ticker4;
    dev::bigint create_ticker5;
    dev::bigint create_ticker6;
    dev::bigint create_ticker7_10;
    dev::bigint create_coin;
    dev::bigint create_token;
    dev::bigint recreate_coin;
    dev::bigint recreate_token;
    dev::bigint declare_candidacy;
    dev::bigint delegate;
    dev::bigint unbond;
    dev::bigint redeem_check;
    dev::bigint set_candidate_on;
    dev::bigint set_candidate_off;
    dev::bigint create_multisig;
    dev::bigint multisend_base;
    dev::bigint multisend_delta;
    dev::bigint edit_candidate;
    dev::bigint set_halt_block;
    dev::bigint edit_ticker_owner;
    dev::bigint edit_multisig;
    dev::bigint edit_candidate_public_key;
    dev::bigint create_swap_pool;
    dev::bigint add_liquidity;
    dev::bigint remove_liquidity;
    dev::bigint edit_candidate_commission;
    dev::bigint mint_token;
    dev::bigint burn_token;
    dev::bigint vote_commission;
    dev::bigint vote_update;
};
struct commission_value : public minter::gate::result {
    dev::bigint value;
};
struct exchange_sell_value : public minter::gate::result {
    dev::bigint will_get;
    dev::bigint commission;
    estimate_swap_from swap_from;
};
struct exchange_buy_value : public minter::gate::result {
    dev::bigint will_pay;
    dev::bigint commission;
    estimate_swap_from swap_from;
};
struct tx_count_value : public minter::gate::result {
    dev::bigint count;
};
struct send_tx_data {
    dev::bigint nonce;
    minter::hash_t hash;
    std::string raw_tx;
    dev::bigint height;
    minter::address_t from;
    std::string type;
    minter::explorer::coin_item_base gas_coin;
    std::unordered_map<std::string, std::string> tags;
};
struct tx_send_result : public minter::gate::result {
    minter::hash_t hash;
    send_tx_data transaction;
};
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::gas_value& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::gas_value& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::price_commissions& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::price_commissions& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::commission_value& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::commission_value& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::exchange_sell_value& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::exchange_sell_value& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::exchange_buy_value& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::exchange_buy_value& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::tx_count_value& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::tx_count_value& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::send_tx_data& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::send_tx_data& resp);
MINTER_TX_API void from_json(const nlohmann::json& j, ::minter::gate::tx_send_result& resp);
MINTER_TX_API void to_json(nlohmann::json& j, const ::minter::gate::tx_send_result& resp);

} // namespace gate
} // namespace minter

#endif
