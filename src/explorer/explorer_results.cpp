
// AUTOGENERATED cpp. DO NOT modify manually.
//
#include "minter/api/explorer/explorer_results.h"

void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::transaction_item& resp) {
    if (j.find("txn") != j.end() && !j.at("txn").is_null())
        j.at("txn").get_to<dev::bigint>(resp.txn);
    if (j.find("hash") != j.end() && !j.at("hash").is_null())
        j.at("hash").get_to<minter::hash_t>(resp.hash);
    if (j.find("nonce") != j.end() && !j.at("nonce").is_null())
        j.at("nonce").get_to<dev::bigint>(resp.nonce);
    if (j.find("height") != j.end() && !j.at("height").is_null())
        j.at("height").get_to<dev::bigint>(resp.height);
    if (j.find("timestamp") != j.end() && !j.at("timestamp").is_null())
        j.at("timestamp").get_to<std::string>(resp.timestamp);
    if (j.find("type") != j.end() && !j.at("type").is_null())
        j.at("type").get_to<minter::tx_type_val>(resp.type);
    if (j.find("payload") != j.end() && !j.at("payload").is_null())
        j.at("payload").get_to<std::string>(resp.payload);
    if (j.find("from") != j.end() && !j.at("from").is_null())
        j.at("from").get_to<minter::address_t>(resp.from);
    if (j.find("data") != j.end() && !j.at("data").is_null())
        ::minter::explorer::transaction_item::_data_decode(j, resp);
    if (j.find("gas") != j.end() && !j.at("gas").is_null())
        j.at("gas").get_to<dev::bigint>(resp.gas);
    if (j.find("gas_price") != j.end() && !j.at("gas_price").is_null())
        j.at("gas_price").get_to<dev::bigint>(resp.gas_price);
    if (j.find("gas_coin") != j.end() && !j.at("gas_coin").is_null())
        j.at("gas_coin").get_to<minter::explorer::coin_item_base>(resp.gas_coin);
    if (j.find("fee") != j.end() && !j.at("fee").is_null())
        j.at("fee").get_to<dev::bigdec18>(resp.fee);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::transaction_item& resp) {
    j = nlohmann::json{
        {"txn", resp.txn},
        {"hash", resp.hash},
        {"nonce", resp.nonce},
        {"height", resp.height},
        {"timestamp", resp.timestamp},
        {"type", resp.type},
        {"payload", resp.payload},
        {"from", resp.from},
        {"data", ::minter::explorer::transaction_item::_data_encode(j, resp)},
        {"gas", resp.gas},
        {"gas_price", resp.gas_price},
        {"gas_coin", resp.gas_coin},
        {"fee", resp.fee},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::coin_item& resp) {
    if (j.find("id") != j.end() && !j.at("id").is_null())
        j.at("id").get_to<dev::bigint>(resp.id);
    if (j.find("symbol") != j.end() && !j.at("symbol").is_null())
        j.at("symbol").get_to<std::string>(resp.symbol);
    if (j.find("type") != j.end() && !j.at("type").is_null())
        j.at("type").get_to<minter::explorer::coin_type>(resp.type);
    if (j.find("name") != j.end() && !j.at("name").is_null())
        j.at("name").get_to<std::string>(resp.name);
    if (j.find("crr") != j.end() && !j.at("crr").is_null())
        j.at("crr").get_to<uint32_t>(resp.crr);
    if (j.find("reserve_valance") != j.end() && !j.at("reserve_valance").is_null())
        j.at("reserve_valance").get_to<dev::bigdec18>(resp.reserve_valance);
    if (j.find("max_supply") != j.end() && !j.at("max_supply").is_null())
        j.at("max_supply").get_to<dev::bigdec18>(resp.max_supply);
    if (j.find("owner_address") != j.end() && !j.at("owner_address").is_null())
        j.at("owner_address").get_to<minter::address_t>(resp.owner_address);
    if (j.find("volume") != j.end() && !j.at("volume").is_null())
        j.at("volume").get_to<dev::bigdec18>(resp.volume);
    if (j.find("mintable") != j.end() && !j.at("mintable").is_null())
        j.at("mintable").get_to<bool>(resp.mintable);
    if (j.find("burnable") != j.end() && !j.at("burnable").is_null())
        j.at("burnable").get_to<bool>(resp.burnable);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::coin_item& resp) {
    j = nlohmann::json{
        {"id", resp.id},
        {"symbol", resp.symbol},
        {"type", resp.type},
        {"name", resp.name},
        {"crr", resp.crr},
        {"reserve_valance", resp.reserve_valance},
        {"max_supply", resp.max_supply},
        {"owner_address", resp.owner_address},
        {"volume", resp.volume},
        {"mintable", resp.mintable},
        {"burnable", resp.burnable},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_send_result& resp) {
    if (j.find("to") != j.end() && !j.at("to").is_null())
        j.at("to").get_to<minter::address_t>(resp.to);
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_send_result& resp) {
    j = nlohmann::json{
        {"to", resp.to},
        {"coin", resp.coin},
        {"value", resp.value},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_create_coin_result& resp) {
    if (j.find("name") != j.end() && !j.at("name").is_null())
        j.at("name").get_to<std::string>(resp.name);
    if (j.find("symbol") != j.end() && !j.at("symbol").is_null())
        j.at("symbol").get_to<std::string>(resp.symbol);
    if (j.find("initial_amount") != j.end() && !j.at("initial_amount").is_null())
        j.at("initial_amount").get_to<dev::bigdec18>(resp.initial_amount);
    if (j.find("initial_reserve") != j.end() && !j.at("initial_reserve").is_null())
        j.at("initial_reserve").get_to<dev::bigdec18>(resp.initial_reserve);
    if (j.find("constant_reserve_ratio") != j.end() && !j.at("constant_reserve_ratio").is_null())
        j.at("constant_reserve_ratio").get_to<uint32_t>(resp.crr);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_create_coin_result& resp) {
    j = nlohmann::json{
        {"name", resp.name},
        {"symbol", resp.symbol},
        {"initial_amount", resp.initial_amount},
        {"initial_reserve", resp.initial_reserve},
        {"constant_reserve_ratio", resp.crr},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_convert_result& resp) {
    if (j.find("coin_to_sell") != j.end() && !j.at("coin_to_sell").is_null())
        j.at("coin_to_sell").get_to<minter::explorer::coin_item_base>(resp.coin_to_sell);
    if (j.find("coin_to_buy") != j.end() && !j.at("coin_to_buy").is_null())
        j.at("coin_to_buy").get_to<minter::explorer::coin_item_base>(resp.coin_to_buy);
    if (j.find("value_to_buy") != j.end() && !j.at("value_to_buy").is_null())
        j.at("value_to_buy").get_to<dev::bigdec18>(resp.value_to_buy);
    if (j.find("value_to_sell") != j.end() && !j.at("value_to_sell").is_null())
        j.at("value_to_sell").get_to<dev::bigdec18>(resp.value_to_sell);
    if (j.find("maximum_value_to_sell") != j.end() && !j.at("maximum_value_to_sell").is_null())
        j.at("maximum_value_to_sell").get_to<dev::bigdec18>(resp.maximum_value_to_sell);
    if (j.find("minimum_value_to_buy") != j.end() && !j.at("minimum_value_to_buy").is_null())
        j.at("minimum_value_to_buy").get_to<dev::bigdec18>(resp.minimum_value_to_buy);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_convert_result& resp) {
    j = nlohmann::json{
        {"coin_to_sell", resp.coin_to_sell},
        {"coin_to_buy", resp.coin_to_buy},
        {"value_to_buy", resp.value_to_buy},
        {"value_to_sell", resp.value_to_sell},
        {"maximum_value_to_sell", resp.maximum_value_to_sell},
        {"minimum_value_to_buy", resp.minimum_value_to_buy},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_declare_candidacy_result& resp) {
    if (j.find("address") != j.end() && !j.at("address").is_null())
        j.at("address").get_to<minter::address_t>(resp.address);
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("commission") != j.end() && !j.at("commission").is_null())
        j.at("commission").get_to<uint32_t>(resp.commission);
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("stake") != j.end() && !j.at("stake").is_null())
        j.at("stake").get_to<dev::bigdec18>(resp.stake);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_declare_candidacy_result& resp) {
    j = nlohmann::json{
        {"address", resp.address},
        {"pub_key", resp.pub_key},
        {"commission", resp.commission},
        {"coin", resp.coin},
        {"stake", resp.stake},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_set_candidate_on_off_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_set_candidate_on_off_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_delegate_unbond_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("stake") != j.end() && !j.at("stake").is_null())
        j.at("stake").get_to<dev::bigdec18>(resp.stake);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_delegate_unbond_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"coin", resp.coin},
        {"stake", resp.stake},
        {"value", resp.value},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_check_data_result& resp) {
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("gas_coin") != j.end() && !j.at("gas_coin").is_null())
        j.at("gas_coin").get_to<minter::explorer::coin_item_base>(resp.gas_coin);
    if (j.find("nonce") != j.end() && !j.at("nonce").is_null())
        j.at("nonce").get_to<dev::bigint>(resp.nonce);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
    if (j.find("sender") != j.end() && !j.at("sender").is_null())
        j.at("sender").get_to<minter::address_t>(resp.sender);
    if (j.find("due_block") != j.end() && !j.at("due_block").is_null())
        j.at("due_block").get_to<dev::bigint>(resp.due_block);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_check_data_result& resp) {
    j = nlohmann::json{
        {"coin", resp.coin},
        {"gas_coin", resp.gas_coin},
        {"nonce", resp.nonce},
        {"value", resp.value},
        {"sender", resp.sender},
        {"due_block", resp.due_block},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_redeem_check_result& resp) {
    if (j.find("raw_check") != j.end() && !j.at("raw_check").is_null())
        j.at("raw_check").get_to<std::string>(resp.raw_check);
    if (j.find("proof") != j.end() && !j.at("proof").is_null())
        j.at("proof").get_to<std::string>(resp.proof);
    if (j.find("stake") != j.end() && !j.at("stake").is_null())
        j.at("stake").get_to<dev::bigdec18>(resp.stake);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
    if (j.find("check") != j.end() && !j.at("check").is_null())
        j.at("check").get_to<tx_check_data_result>(resp.check);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_redeem_check_result& resp) {
    j = nlohmann::json{
        {"raw_check", resp.raw_check},
        {"proof", resp.proof},
        {"stake", resp.stake},
        {"value", resp.value},
        {"check", resp.check},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_create_multisig_result& resp) {
    if (j.find("threshold") != j.end() && !j.at("threshold").is_null())
        j.at("threshold").get_to<dev::bigint>(resp.threshold);
    if (j.find("weights") != j.end() && !j.at("weights").is_null())
        j.at("weights").get_to<std::vector<dev::bigint>>(resp.weights);
    if (j.find("addresses") != j.end() && !j.at("addresses").is_null())
        j.at("addresses").get_to<std::vector<minter::address_t>>(resp.addresses);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_create_multisig_result& resp) {
    j = nlohmann::json{
        {"threshold", resp.threshold},
        {"weights", resp.weights},
        {"addresses", resp.addresses},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_multisend_result& resp) {
    if (j.find("list") != j.end() && !j.at("list").is_null())
        j.at("list").get_to<std::vector<tx_send_result>>(resp.items);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_multisend_result& resp) {
    j = nlohmann::json{
        {"list", resp.items},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_edit_candidate_result& resp) {
    if (j.find("reward_address") != j.end() && !j.at("reward_address").is_null())
        j.at("reward_address").get_to<minter::address_t>(resp.reward_address);
    if (j.find("owner_address") != j.end() && !j.at("owner_address").is_null())
        j.at("owner_address").get_to<minter::address_t>(resp.owner_address);
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_edit_candidate_result& resp) {
    j = nlohmann::json{
        {"reward_address", resp.reward_address},
        {"owner_address", resp.owner_address},
        {"pub_key", resp.pub_key},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_edit_candidate_pubkey_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("new_pub_key") != j.end() && !j.at("new_pub_key").is_null())
        j.at("new_pub_key").get_to<minter::pubkey_t>(resp.new_pub_key);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_edit_candidate_pubkey_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"new_pub_key", resp.new_pub_key},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_set_halt_block_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("height") != j.end() && !j.at("height").is_null())
        j.at("height").get_to<dev::bigint>(resp.height);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_set_halt_block_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"height", resp.height},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_edit_multisig_result& resp) {
    if (j.find("threshold") != j.end() && !j.at("threshold").is_null())
        j.at("threshold").get_to<dev::bigint>(resp.threshold);
    if (j.find("weights") != j.end() && !j.at("weights").is_null())
        j.at("weights").get_to<std::vector<dev::bigint>>(resp.weights);
    if (j.find("addresses") != j.end() && !j.at("addresses").is_null())
        j.at("addresses").get_to<std::vector<minter::address_t>>(resp.addresses);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_edit_multisig_result& resp) {
    j = nlohmann::json{
        {"threshold", resp.threshold},
        {"weights", resp.weights},
        {"addresses", resp.addresses},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_price_vote_result& resp) {
    if (j.find("price") != j.end() && !j.at("price").is_null())
        j.at("price").get_to<dev::bigint>(resp.price);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_price_vote_result& resp) {
    j = nlohmann::json{
        {"price", resp.price},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_recreate_coin_result& resp) {
    if (j.find("name") != j.end() && !j.at("name").is_null())
        j.at("name").get_to<std::string>(resp.name);
    if (j.find("symbol") != j.end() && !j.at("symbol").is_null())
        j.at("symbol").get_to<std::string>(resp.symbol);
    if (j.find("initial_amount") != j.end() && !j.at("initial_amount").is_null())
        j.at("initial_amount").get_to<dev::bigdec18>(resp.initial_amount);
    if (j.find("initial_reserve") != j.end() && !j.at("initial_reserve").is_null())
        j.at("initial_reserve").get_to<dev::bigdec18>(resp.initial_reserve);
    if (j.find("constant_reserve_ratio") != j.end() && !j.at("constant_reserve_ratio").is_null())
        j.at("constant_reserve_ratio").get_to<uint32_t>(resp.crr);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_recreate_coin_result& resp) {
    j = nlohmann::json{
        {"name", resp.name},
        {"symbol", resp.symbol},
        {"initial_amount", resp.initial_amount},
        {"initial_reserve", resp.initial_reserve},
        {"constant_reserve_ratio", resp.crr},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_add_liquidity_result& resp) {
    if (j.find("coin0") != j.end() && !j.at("coin0").is_null())
        j.at("coin0").get_to<minter::explorer::coin_item_base>(resp.coin0);
    if (j.find("coin1") != j.end() && !j.at("coin1").is_null())
        j.at("coin1").get_to<minter::explorer::coin_item_base>(resp.coin1);
    if (j.find("pool_token") != j.end() && !j.at("pool_token").is_null())
        j.at("pool_token").get_to<minter::explorer::coin_item_base>(resp.pool_token);
    if (j.find("volume0") != j.end() && !j.at("volume0").is_null())
        j.at("volume0").get_to<dev::bigdec18>(resp.volume0);
    if (j.find("volume1") != j.end() && !j.at("volume1").is_null())
        j.at("volume1").get_to<dev::bigdec18>(resp.volume1);
    if (j.find("maximum_volume1") != j.end() && !j.at("maximum_volume1").is_null())
        j.at("maximum_volume1").get_to<dev::bigdec18>(resp.maximum_volume1);
    if (j.find("liquidity") != j.end() && !j.at("liquidity").is_null())
        j.at("liquidity").get_to<dev::bigdec18>(resp.liquidity);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_add_liquidity_result& resp) {
    j = nlohmann::json{
        {"coin0", resp.coin0},
        {"coin1", resp.coin1},
        {"pool_token", resp.pool_token},
        {"volume0", resp.volume0},
        {"volume1", resp.volume1},
        {"maximum_volume1", resp.maximum_volume1},
        {"liquidity", resp.liquidity},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_remove_liquidity_result& resp) {
    if (j.find("coin0") != j.end() && !j.at("coin0").is_null())
        j.at("coin0").get_to<minter::explorer::coin_item_base>(resp.coin0);
    if (j.find("coin1") != j.end() && !j.at("coin1").is_null())
        j.at("coin1").get_to<minter::explorer::coin_item_base>(resp.coin1);
    if (j.find("pool_token") != j.end() && !j.at("pool_token").is_null())
        j.at("pool_token").get_to<minter::explorer::coin_item_base>(resp.pool_token);
    if (j.find("volume0") != j.end() && !j.at("volume0").is_null())
        j.at("volume0").get_to<dev::bigdec18>(resp.volume0);
    if (j.find("volume1") != j.end() && !j.at("volume1").is_null())
        j.at("volume1").get_to<dev::bigdec18>(resp.volume1);
    if (j.find("minimum_volume0") != j.end() && !j.at("minimum_volume0").is_null())
        j.at("minimum_volume0").get_to<dev::bigdec18>(resp.minimum_volume0);
    if (j.find("minimum_volume1") != j.end() && !j.at("minimum_volume1").is_null())
        j.at("minimum_volume1").get_to<dev::bigdec18>(resp.minimum_volume1);
    if (j.find("liquidity") != j.end() && !j.at("liquidity").is_null())
        j.at("liquidity").get_to<dev::bigdec18>(resp.liquidity);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_remove_liquidity_result& resp) {
    j = nlohmann::json{
        {"coin0", resp.coin0},
        {"coin1", resp.coin1},
        {"pool_token", resp.pool_token},
        {"volume0", resp.volume0},
        {"volume1", resp.volume1},
        {"minimum_volume0", resp.minimum_volume0},
        {"minimum_volume1", resp.minimum_volume1},
        {"liquidity", resp.liquidity},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_convert_swap_pool_result& resp) {
    if (j.find("coins") != j.end() && !j.at("coins").is_null())
        j.at("coins").get_to<std::vector<minter::explorer::coin_item_base>>(resp.coins);
    if (j.find("coin_to_buy") != j.end() && !j.at("coin_to_buy").is_null())
        j.at("coin_to_buy").get_to<coin_item_base>(resp.coin_to_buy);
    if (j.find("coin_to_sell") != j.end() && !j.at("coin_to_sell").is_null())
        j.at("coin_to_sell").get_to<coin_item_base>(resp.coin_to_sell);
    if (j.find("value_to_sell") != j.end() && !j.at("value_to_sell").is_null())
        j.at("value_to_sell").get_to<dev::bigdec18>(resp.value_to_sell);
    if (j.find("value_to_buy") != j.end() && !j.at("value_to_buy").is_null())
        j.at("value_to_buy").get_to<dev::bigdec18>(resp.value_to_buy);
    if (j.find("minimum_value_to_buy") != j.end() && !j.at("minimum_value_to_buy").is_null())
        j.at("minimum_value_to_buy").get_to<dev::bigdec18>(resp.minimum_value_to_buy);
    if (j.find("maximum_value_to_sell") != j.end() && !j.at("maximum_value_to_sell").is_null())
        j.at("maximum_value_to_sell").get_to<dev::bigdec18>(resp.maximum_value_to_sell);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_convert_swap_pool_result& resp) {
    j = nlohmann::json{
        {"coins", resp.coins},
        {"coin_to_buy", resp.coin_to_buy},
        {"coin_to_sell", resp.coin_to_sell},
        {"value_to_sell", resp.value_to_sell},
        {"value_to_buy", resp.value_to_buy},
        {"minimum_value_to_buy", resp.minimum_value_to_buy},
        {"maximum_value_to_sell", resp.maximum_value_to_sell},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_sell_swap_pool_result& resp) {
    if (j.find("coins") != j.end() && !j.at("coins").is_null())
        j.at("coins").get_to<std::vector<minter::explorer::coin_item_base>>(resp.coins);
    if (j.find("coin_to_buy") != j.end() && !j.at("coin_to_buy").is_null())
        j.at("coin_to_buy").get_to<coin_item_base>(resp.coin_to_buy);
    if (j.find("coin_to_sell") != j.end() && !j.at("coin_to_sell").is_null())
        j.at("coin_to_sell").get_to<coin_item_base>(resp.coin_to_sell);
    if (j.find("value_to_sell") != j.end() && !j.at("value_to_sell").is_null())
        j.at("value_to_sell").get_to<dev::bigdec18>(resp.value_to_sell);
    if (j.find("value_to_buy") != j.end() && !j.at("value_to_buy").is_null())
        j.at("value_to_buy").get_to<dev::bigdec18>(resp.value_to_buy);
    if (j.find("minimum_value_to_buy") != j.end() && !j.at("minimum_value_to_buy").is_null())
        j.at("minimum_value_to_buy").get_to<dev::bigdec18>(resp.minimum_value_to_buy);
    if (j.find("maximum_value_to_sell") != j.end() && !j.at("maximum_value_to_sell").is_null())
        j.at("maximum_value_to_sell").get_to<dev::bigdec18>(resp.maximum_value_to_sell);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_sell_swap_pool_result& resp) {
    j = nlohmann::json{
        {"coins", resp.coins},
        {"coin_to_buy", resp.coin_to_buy},
        {"coin_to_sell", resp.coin_to_sell},
        {"value_to_sell", resp.value_to_sell},
        {"value_to_buy", resp.value_to_buy},
        {"minimum_value_to_buy", resp.minimum_value_to_buy},
        {"maximum_value_to_sell", resp.maximum_value_to_sell},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_sell_all_swap_pool_result& resp) {
    if (j.find("coins") != j.end() && !j.at("coins").is_null())
        j.at("coins").get_to<std::vector<minter::explorer::coin_item_base>>(resp.coins);
    if (j.find("coin_to_buy") != j.end() && !j.at("coin_to_buy").is_null())
        j.at("coin_to_buy").get_to<coin_item_base>(resp.coin_to_buy);
    if (j.find("coin_to_sell") != j.end() && !j.at("coin_to_sell").is_null())
        j.at("coin_to_sell").get_to<coin_item_base>(resp.coin_to_sell);
    if (j.find("value_to_sell") != j.end() && !j.at("value_to_sell").is_null())
        j.at("value_to_sell").get_to<dev::bigdec18>(resp.value_to_sell);
    if (j.find("value_to_buy") != j.end() && !j.at("value_to_buy").is_null())
        j.at("value_to_buy").get_to<dev::bigdec18>(resp.value_to_buy);
    if (j.find("minimum_value_to_buy") != j.end() && !j.at("minimum_value_to_buy").is_null())
        j.at("minimum_value_to_buy").get_to<dev::bigdec18>(resp.minimum_value_to_buy);
    if (j.find("maximum_value_to_sell") != j.end() && !j.at("maximum_value_to_sell").is_null())
        j.at("maximum_value_to_sell").get_to<dev::bigdec18>(resp.maximum_value_to_sell);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_sell_all_swap_pool_result& resp) {
    j = nlohmann::json{
        {"coins", resp.coins},
        {"coin_to_buy", resp.coin_to_buy},
        {"coin_to_sell", resp.coin_to_sell},
        {"value_to_sell", resp.value_to_sell},
        {"value_to_buy", resp.value_to_buy},
        {"minimum_value_to_buy", resp.minimum_value_to_buy},
        {"maximum_value_to_sell", resp.maximum_value_to_sell},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_buy_swap_pool_result& resp) {
    if (j.find("coins") != j.end() && !j.at("coins").is_null())
        j.at("coins").get_to<std::vector<minter::explorer::coin_item_base>>(resp.coins);
    if (j.find("coin_to_buy") != j.end() && !j.at("coin_to_buy").is_null())
        j.at("coin_to_buy").get_to<coin_item_base>(resp.coin_to_buy);
    if (j.find("coin_to_sell") != j.end() && !j.at("coin_to_sell").is_null())
        j.at("coin_to_sell").get_to<coin_item_base>(resp.coin_to_sell);
    if (j.find("value_to_sell") != j.end() && !j.at("value_to_sell").is_null())
        j.at("value_to_sell").get_to<dev::bigdec18>(resp.value_to_sell);
    if (j.find("value_to_buy") != j.end() && !j.at("value_to_buy").is_null())
        j.at("value_to_buy").get_to<dev::bigdec18>(resp.value_to_buy);
    if (j.find("minimum_value_to_buy") != j.end() && !j.at("minimum_value_to_buy").is_null())
        j.at("minimum_value_to_buy").get_to<dev::bigdec18>(resp.minimum_value_to_buy);
    if (j.find("maximum_value_to_sell") != j.end() && !j.at("maximum_value_to_sell").is_null())
        j.at("maximum_value_to_sell").get_to<dev::bigdec18>(resp.maximum_value_to_sell);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_buy_swap_pool_result& resp) {
    j = nlohmann::json{
        {"coins", resp.coins},
        {"coin_to_buy", resp.coin_to_buy},
        {"coin_to_sell", resp.coin_to_sell},
        {"value_to_sell", resp.value_to_sell},
        {"value_to_buy", resp.value_to_buy},
        {"minimum_value_to_buy", resp.minimum_value_to_buy},
        {"maximum_value_to_sell", resp.maximum_value_to_sell},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_create_swap_pool_result& resp) {
    if (j.find("coin0") != j.end() && !j.at("coin0").is_null())
        j.at("coin0").get_to<minter::explorer::coin_item_base>(resp.coin0);
    if (j.find("coin1") != j.end() && !j.at("coin1").is_null())
        j.at("coin1").get_to<minter::explorer::coin_item_base>(resp.coin1);
    if (j.find("pool_token") != j.end() && !j.at("pool_token").is_null())
        j.at("pool_token").get_to<minter::explorer::coin_item_base>(resp.pool_token);
    if (j.find("volume0") != j.end() && !j.at("volume0").is_null())
        j.at("volume0").get_to<dev::bigdec18>(resp.volume0);
    if (j.find("volume1") != j.end() && !j.at("volume1").is_null())
        j.at("volume1").get_to<dev::bigdec18>(resp.volume1);
    if (j.find("liquidity") != j.end() && !j.at("liquidity").is_null())
        j.at("liquidity").get_to<dev::bigdec18>(resp.liquidity);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_create_swap_pool_result& resp) {
    j = nlohmann::json{
        {"coin0", resp.coin0},
        {"coin1", resp.coin1},
        {"pool_token", resp.pool_token},
        {"volume0", resp.volume0},
        {"volume1", resp.volume1},
        {"liquidity", resp.liquidity},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_edit_candidate_commission_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("commission") != j.end() && !j.at("commission").is_null())
        j.at("commission").get_to<uint32_t>(resp.commission);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_edit_candidate_commission_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"commission", resp.commission},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_mint_token_result& resp) {
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_mint_token_result& resp) {
    j = nlohmann::json{
        {"coin", resp.coin},
        {"value", resp.value},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_burn_token_result& resp) {
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_burn_token_result& resp) {
    j = nlohmann::json{
        {"coin", resp.coin},
        {"value", resp.value},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_create_token_result& resp) {
    if (j.find("symbol") != j.end() && !j.at("symbol").is_null())
        j.at("symbol").get_to<std::string>(resp.symbol);
    if (j.find("initial_amount") != j.end() && !j.at("initial_amount").is_null())
        j.at("initial_amount").get_to<dev::bigdec18>(resp.initial_amount);
    if (j.find("max_supply") != j.end() && !j.at("max_supply").is_null())
        j.at("max_supply").get_to<dev::bigdec18>(resp.max_supply);
    if (j.find("mintable") != j.end() && !j.at("mintable").is_null())
        j.at("mintable").get_to<bool>(resp.mintable);
    if (j.find("burnable") != j.end() && !j.at("burnable").is_null())
        j.at("burnable").get_to<bool>(resp.burnable);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_create_token_result& resp) {
    j = nlohmann::json{
        {"symbol", resp.symbol},
        {"initial_amount", resp.initial_amount},
        {"max_supply", resp.max_supply},
        {"mintable", resp.mintable},
        {"burnable", resp.burnable},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_recreate_token_result& resp) {
    if (j.find("symbol") != j.end() && !j.at("symbol").is_null())
        j.at("symbol").get_to<std::string>(resp.symbol);
    if (j.find("initial_amount") != j.end() && !j.at("initial_amount").is_null())
        j.at("initial_amount").get_to<dev::bigdec18>(resp.initial_amount);
    if (j.find("max_supply") != j.end() && !j.at("max_supply").is_null())
        j.at("max_supply").get_to<dev::bigdec18>(resp.max_supply);
    if (j.find("mintable") != j.end() && !j.at("mintable").is_null())
        j.at("mintable").get_to<bool>(resp.mintable);
    if (j.find("burnable") != j.end() && !j.at("burnable").is_null())
        j.at("burnable").get_to<bool>(resp.burnable);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_recreate_token_result& resp) {
    j = nlohmann::json{
        {"symbol", resp.symbol},
        {"initial_amount", resp.initial_amount},
        {"max_supply", resp.max_supply},
        {"mintable", resp.mintable},
        {"burnable", resp.burnable},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_edit_coin_owner_result& resp) {
    if (j.find("symbol") != j.end() && !j.at("symbol").is_null())
        j.at("symbol").get_to<std::string>(resp.symbol);
    if (j.find("new_owner") != j.end() && !j.at("new_owner").is_null())
        j.at("new_owner").get_to<minter::address_t>(resp.new_owner);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_edit_coin_owner_result& resp) {
    j = nlohmann::json{
        {"symbol", resp.symbol},
        {"new_owner", resp.new_owner},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_vote_commission_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("height") != j.end() && !j.at("height").is_null())
        j.at("height").get_to<dev::bigint>(resp.height);
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("payload_byte") != j.end() && !j.at("payload_byte").is_null())
        j.at("payload_byte").get_to<dev::bigint>(resp.payload_byte);
    if (j.find("send") != j.end() && !j.at("send").is_null())
        j.at("send").get_to<dev::bigint>(resp.send);
    if (j.find("buy_bancor") != j.end() && !j.at("buy_bancor").is_null())
        j.at("buy_bancor").get_to<dev::bigint>(resp.buy_bancor);
    if (j.find("sell_bancor") != j.end() && !j.at("sell_bancor").is_null())
        j.at("sell_bancor").get_to<dev::bigint>(resp.sell_bancor);
    if (j.find("sell_all_bancor") != j.end() && !j.at("sell_all_bancor").is_null())
        j.at("sell_all_bancor").get_to<dev::bigint>(resp.sell_all_bancor);
    if (j.find("buy_pool_base") != j.end() && !j.at("buy_pool_base").is_null())
        j.at("buy_pool_base").get_to<dev::bigint>(resp.buy_pool_base);
    if (j.find("sell_pool_base") != j.end() && !j.at("sell_pool_base").is_null())
        j.at("sell_pool_base").get_to<dev::bigint>(resp.sell_pool_base);
    if (j.find("sell_all_pool_base") != j.end() && !j.at("sell_all_pool_base").is_null())
        j.at("sell_all_pool_base").get_to<dev::bigint>(resp.sell_all_pool_base);
    if (j.find("buy_pool_delta") != j.end() && !j.at("buy_pool_delta").is_null())
        j.at("buy_pool_delta").get_to<dev::bigint>(resp.buy_pool_delta);
    if (j.find("sell_pool_delta") != j.end() && !j.at("sell_pool_delta").is_null())
        j.at("sell_pool_delta").get_to<dev::bigint>(resp.sell_pool_delta);
    if (j.find("sell_all_pool_delta") != j.end() && !j.at("sell_all_pool_delta").is_null())
        j.at("sell_all_pool_delta").get_to<dev::bigint>(resp.sell_all_pool_delta);
    if (j.find("create_ticker3") != j.end() && !j.at("create_ticker3").is_null())
        j.at("create_ticker3").get_to<dev::bigint>(resp.create_ticker3);
    if (j.find("create_ticker4") != j.end() && !j.at("create_ticker4").is_null())
        j.at("create_ticker4").get_to<dev::bigint>(resp.create_ticker4);
    if (j.find("create_ticker5") != j.end() && !j.at("create_ticker5").is_null())
        j.at("create_ticker5").get_to<dev::bigint>(resp.create_ticker5);
    if (j.find("create_ticker6") != j.end() && !j.at("create_ticker6").is_null())
        j.at("create_ticker6").get_to<dev::bigint>(resp.create_ticker6);
    if (j.find("create_ticker7_10") != j.end() && !j.at("create_ticker7_10").is_null())
        j.at("create_ticker7_10").get_to<dev::bigint>(resp.create_ticker7_10);
    if (j.find("create_coin") != j.end() && !j.at("create_coin").is_null())
        j.at("create_coin").get_to<dev::bigint>(resp.create_coin);
    if (j.find("create_token") != j.end() && !j.at("create_token").is_null())
        j.at("create_token").get_to<dev::bigint>(resp.create_token);
    if (j.find("recreate_coin") != j.end() && !j.at("recreate_coin").is_null())
        j.at("recreate_coin").get_to<dev::bigint>(resp.recreate_coin);
    if (j.find("recreate_token") != j.end() && !j.at("recreate_token").is_null())
        j.at("recreate_token").get_to<dev::bigint>(resp.recreate_token);
    if (j.find("declare_candidacy") != j.end() && !j.at("declare_candidacy").is_null())
        j.at("declare_candidacy").get_to<dev::bigint>(resp.declare_candidacy);
    if (j.find("delegate") != j.end() && !j.at("delegate").is_null())
        j.at("delegate").get_to<dev::bigint>(resp.delegate);
    if (j.find("unbond") != j.end() && !j.at("unbond").is_null())
        j.at("unbond").get_to<dev::bigint>(resp.unbond);
    if (j.find("redeem_check") != j.end() && !j.at("redeem_check").is_null())
        j.at("redeem_check").get_to<dev::bigint>(resp.redeem_check);
    if (j.find("set_candidate_on") != j.end() && !j.at("set_candidate_on").is_null())
        j.at("set_candidate_on").get_to<dev::bigint>(resp.set_candidate_on);
    if (j.find("set_candidate_off") != j.end() && !j.at("set_candidate_off").is_null())
        j.at("set_candidate_off").get_to<dev::bigint>(resp.set_candidate_off);
    if (j.find("create_multisig") != j.end() && !j.at("create_multisig").is_null())
        j.at("create_multisig").get_to<dev::bigint>(resp.create_multisig);
    if (j.find("multisend_base") != j.end() && !j.at("multisend_base").is_null())
        j.at("multisend_base").get_to<dev::bigint>(resp.multisend_base);
    if (j.find("multisend_delta") != j.end() && !j.at("multisend_delta").is_null())
        j.at("multisend_delta").get_to<dev::bigint>(resp.multisend_delta);
    if (j.find("edit_candidate") != j.end() && !j.at("edit_candidate").is_null())
        j.at("edit_candidate").get_to<dev::bigint>(resp.edit_candidate);
    if (j.find("set_halt_block") != j.end() && !j.at("set_halt_block").is_null())
        j.at("set_halt_block").get_to<dev::bigint>(resp.set_halt_block);
    if (j.find("edit_ticker_owner") != j.end() && !j.at("edit_ticker_owner").is_null())
        j.at("edit_ticker_owner").get_to<dev::bigint>(resp.edit_ticker_owner);
    if (j.find("edit_multisig") != j.end() && !j.at("edit_multisig").is_null())
        j.at("edit_multisig").get_to<dev::bigint>(resp.edit_multisig);
    if (j.find("edit_candidate_public_key") != j.end() && !j.at("edit_candidate_public_key").is_null())
        j.at("edit_candidate_public_key").get_to<dev::bigint>(resp.edit_candidate_public_key);
    if (j.find("create_swap_pool") != j.end() && !j.at("create_swap_pool").is_null())
        j.at("create_swap_pool").get_to<dev::bigint>(resp.create_swap_pool);
    if (j.find("add_liquidity") != j.end() && !j.at("add_liquidity").is_null())
        j.at("add_liquidity").get_to<dev::bigint>(resp.add_liquidity);
    if (j.find("remove_liquidity") != j.end() && !j.at("remove_liquidity").is_null())
        j.at("remove_liquidity").get_to<dev::bigint>(resp.remove_liquidity);
    if (j.find("edit_candidate_commission") != j.end() && !j.at("edit_candidate_commission").is_null())
        j.at("edit_candidate_commission").get_to<dev::bigint>(resp.edit_candidate_commission);
    if (j.find("mint_token") != j.end() && !j.at("mint_token").is_null())
        j.at("mint_token").get_to<dev::bigint>(resp.mint_token);
    if (j.find("burn_token") != j.end() && !j.at("burn_token").is_null())
        j.at("burn_token").get_to<dev::bigint>(resp.burn_token);
    if (j.find("vote_commission") != j.end() && !j.at("vote_commission").is_null())
        j.at("vote_commission").get_to<dev::bigint>(resp.vote_commission);
    if (j.find("vote_update") != j.end() && !j.at("vote_update").is_null())
        j.at("vote_update").get_to<dev::bigint>(resp.vote_update);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_vote_commission_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"height", resp.height},
        {"coin", resp.coin},
        {"payload_byte", resp.payload_byte},
        {"send", resp.send},
        {"buy_bancor", resp.buy_bancor},
        {"sell_bancor", resp.sell_bancor},
        {"sell_all_bancor", resp.sell_all_bancor},
        {"buy_pool_base", resp.buy_pool_base},
        {"sell_pool_base", resp.sell_pool_base},
        {"sell_all_pool_base", resp.sell_all_pool_base},
        {"buy_pool_delta", resp.buy_pool_delta},
        {"sell_pool_delta", resp.sell_pool_delta},
        {"sell_all_pool_delta", resp.sell_all_pool_delta},
        {"create_ticker3", resp.create_ticker3},
        {"create_ticker4", resp.create_ticker4},
        {"create_ticker5", resp.create_ticker5},
        {"create_ticker6", resp.create_ticker6},
        {"create_ticker7_10", resp.create_ticker7_10},
        {"create_coin", resp.create_coin},
        {"create_token", resp.create_token},
        {"recreate_coin", resp.recreate_coin},
        {"recreate_token", resp.recreate_token},
        {"declare_candidacy", resp.declare_candidacy},
        {"delegate", resp.delegate},
        {"unbond", resp.unbond},
        {"redeem_check", resp.redeem_check},
        {"set_candidate_on", resp.set_candidate_on},
        {"set_candidate_off", resp.set_candidate_off},
        {"create_multisig", resp.create_multisig},
        {"multisend_base", resp.multisend_base},
        {"multisend_delta", resp.multisend_delta},
        {"edit_candidate", resp.edit_candidate},
        {"set_halt_block", resp.set_halt_block},
        {"edit_ticker_owner", resp.edit_ticker_owner},
        {"edit_multisig", resp.edit_multisig},
        {"edit_candidate_public_key", resp.edit_candidate_public_key},
        {"create_swap_pool", resp.create_swap_pool},
        {"add_liquidity", resp.add_liquidity},
        {"remove_liquidity", resp.remove_liquidity},
        {"edit_candidate_commission", resp.edit_candidate_commission},
        {"mint_token", resp.mint_token},
        {"burn_token", resp.burn_token},
        {"vote_commission", resp.vote_commission},
        {"vote_update", resp.vote_update},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::tx_vote_update_result& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("height") != j.end() && !j.at("height").is_null())
        j.at("height").get_to<dev::bigint>(resp.height);
    if (j.find("version") != j.end() && !j.at("version").is_null())
        j.at("version").get_to<std::string>(resp.version);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::tx_vote_update_result& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"height", resp.height},
        {"version", resp.version},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::validator_meta& resp) {
    if (j.find("name") != j.end() && !j.at("name").is_null())
        j.at("name").get_to<std::string>(resp.name);
    if (j.find("description") != j.end() && !j.at("description").is_null())
        j.at("description").get_to<std::string>(resp.description);
    if (j.find("site_url") != j.end() && !j.at("site_url").is_null())
        j.at("site_url").get_to<std::string>(resp.site_url);
    if (j.find("icon_url") != j.end() && !j.at("icon_url").is_null())
        j.at("icon_url").get_to<std::string>(resp.icon_url);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::validator_meta& resp) {
    j = nlohmann::json{
        {"name", resp.name},
        {"description", resp.description},
        {"site_url", resp.site_url},
        {"icon_url", resp.icon_url},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::validator_item& resp) {
    if (j.find("public_key") != j.end() && !j.at("public_key").is_null())
        j.at("public_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("status") != j.end() && !j.at("status").is_null())
        j.at("status").get_to<int>(resp.status);
    if (j.find("stake") != j.end() && !j.at("stake").is_null())
        j.at("stake").get_to<dev::bigdec18>(resp.stake);
    if (j.find("part") != j.end() && !j.at("part").is_null())
        j.at("part").get_to<dev::bigdec18>(resp.part);
    if (j.find("meta") != j.end() && !j.at("meta").is_null())
        j.at("meta").get_to<validator_meta>(resp.meta);
    if (j.find("commission") != j.end() && !j.at("commission").is_null())
        j.at("commission").get_to<uint32_t>(resp.commission);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::validator_item& resp) {
    j = nlohmann::json{
        {"public_key", resp.pub_key},
        {"status", resp.status},
        {"stake", resp.stake},
        {"part", resp.part},
        {"meta", resp.meta},
        {"commission", resp.commission},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::balance_item& resp) {
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("amount") != j.end() && !j.at("amount").is_null())
        j.at("amount").get_to<dev::bigdec18>(resp.amount);
    if (j.find("bip_amount") != j.end() && !j.at("bip_amount").is_null())
        j.at("bip_amount").get_to<dev::bigdec18>(resp.bip_amount);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::balance_item& resp) {
    j = nlohmann::json{
        {"coin", resp.coin},
        {"amount", resp.amount},
        {"bip_amount", resp.bip_amount},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::balance_items& resp) {
    if (j.find("address") != j.end() && !j.at("address").is_null())
        j.at("address").get_to<minter::address_t>(resp.address);
    if (j.find("balances") != j.end() && !j.at("balances").is_null())
        j.at("balances").get_to<std::vector<balance_item>>(resp.balances);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::balance_items& resp) {
    j = nlohmann::json{
        {"address", resp.address},
        {"balances", resp.balances},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::delegated_item& resp) {
    if (j.find("pub_key") != j.end() && !j.at("pub_key").is_null())
        j.at("pub_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.amount);
    if (j.find("bip_value") != j.end() && !j.at("bip_value").is_null())
        j.at("bip_value").get_to<dev::bigdec18>(resp.bip_amount);
    if (j.find("is_waitlisted") != j.end() && !j.at("is_waitlisted").is_null())
        j.at("is_waitlisted").get_to<bool>(resp.is_waitlisted);
    if (j.find("validator") != j.end() && !j.at("validator").is_null())
        j.at("validator").get_to<minter::explorer::validator_item>(resp.validator);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::delegated_item& resp) {
    j = nlohmann::json{
        {"pub_key", resp.pub_key},
        {"coin", resp.coin},
        {"value", resp.amount},
        {"bip_value", resp.bip_amount},
        {"is_waitlisted", resp.is_waitlisted},
        {"validator", resp.validator},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::reward_item& resp) {
    if (j.find("block") != j.end() && !j.at("block").is_null())
        j.at("block").get_to<uint64_t>(resp.block);
    if (j.find("role") != j.end() && !j.at("role").is_null())
        j.at("role").get_to<std::string>(resp.role);
    if (j.find("amount") != j.end() && !j.at("amount").is_null())
        j.at("amount").get_to<dev::bigdec18>(resp.amount);
    if (j.find("address") != j.end() && !j.at("address").is_null())
        j.at("address").get_to<minter::address_t>(resp.address);
    if (j.find("validator") != j.end() && !j.at("validator").is_null())
        j.at("validator").get_to<minter::pubkey_t>(resp.validator);
    if (j.find("timestamp") != j.end() && !j.at("timestamp").is_null())
        j.at("timestamp").get_to<std::string>(resp.timestamp);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::reward_item& resp) {
    j = nlohmann::json{
        {"block", resp.block},
        {"role", resp.role},
        {"amount", resp.amount},
        {"address", resp.address},
        {"validator", resp.validator},
        {"timestamp", resp.timestamp},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::block_validator_item& resp) {
    if (j.find("publicKey") != j.end() && !j.at("publicKey").is_null())
        j.at("publicKey").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("signed") != j.end() && !j.at("signed").is_null())
        j.at("signed").get_to<bool>(resp.is_signed);
    if (j.find("meta") != j.end() && !j.at("meta").is_null())
        j.at("meta").get_to<validator_meta>(resp.meta);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::block_validator_item& resp) {
    j = nlohmann::json{
        {"publicKey", resp.pub_key},
        {"signed", resp.is_signed},
        {"meta", resp.meta},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::block_info_item& resp) {
    if (j.find("height") != j.end() && !j.at("height").is_null())
        j.at("height").get_to<dev::bigint>(resp.height);
    if (j.find("size") != j.end() && !j.at("size").is_null())
        j.at("size").get_to<size_t>(resp.size);
    if (j.find("tx_count") != j.end() && !j.at("tx_count").is_null())
        j.at("tx_count").get_to<size_t>(resp.tx_count);
    if (j.find("block_time") != j.end() && !j.at("block_time").is_null())
        j.at("block_time").get_to<std::string>(resp.block_time);
    if (j.find("timestamp") != j.end() && !j.at("timestamp").is_null())
        j.at("timestamp").get_to<std::string>(resp.timestamp);
    if (j.find("reward") != j.end() && !j.at("reward").is_null())
        j.at("reward").get_to<dev::bigdec18>(resp.reward);
    if (j.find("hash") != j.end() && !j.at("hash").is_null())
        j.at("hash").get_to<minter::hash_t>(resp.hash);
    if (j.find("validators") != j.end() && !j.at("validators").is_null())
        j.at("validators").get_to<std::vector<block_validator_item>>(resp.validators);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::block_info_item& resp) {
    j = nlohmann::json{
        {"height", resp.height},
        {"size", resp.size},
        {"tx_count", resp.tx_count},
        {"block_time", resp.block_time},
        {"timestamp", resp.timestamp},
        {"reward", resp.reward},
        {"hash", resp.hash},
        {"validators", resp.validators},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::delegator_item& resp) {
    if (j.find("coin") != j.end() && !j.at("coin").is_null())
        j.at("coin").get_to<minter::explorer::coin_item_base>(resp.coin);
    if (j.find("address") != j.end() && !j.at("address").is_null())
        j.at("address").get_to<minter::address_t>(resp.address);
    if (j.find("value") != j.end() && !j.at("value").is_null())
        j.at("value").get_to<dev::bigdec18>(resp.value);
    if (j.find("bip_value") != j.end() && !j.at("bip_value").is_null())
        j.at("bip_value").get_to<dev::bigdec18>(resp.bip_value);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::delegator_item& resp) {
    j = nlohmann::json{
        {"coin", resp.coin},
        {"address", resp.address},
        {"value", resp.value},
        {"bip_value", resp.bip_value},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::validator_detailed_item& resp) {
    if (j.find("public_key") != j.end() && !j.at("public_key").is_null())
        j.at("public_key").get_to<minter::pubkey_t>(resp.pub_key);
    if (j.find("status") != j.end() && !j.at("status").is_null())
        j.at("status").get_to<int>(resp.status);
    if (j.find("stake") != j.end() && !j.at("stake").is_null())
        j.at("stake").get_to<dev::bigdec18>(resp.stake);
    if (j.find("part") != j.end() && !j.at("part").is_null())
        j.at("part").get_to<dev::bigdec18>(resp.part);
    if (j.find("meta") != j.end() && !j.at("meta").is_null())
        j.at("meta").get_to<validator_meta>(resp.meta);
    if (j.find("delegator_count") != j.end() && !j.at("delegator_count").is_null())
        j.at("delegator_count").get_to<uint64_t>(resp.delegator_count);
    if (j.find("delegator_list") != j.end() && !j.at("delegator_list").is_null())
        j.at("delegator_list").get_to<std::vector<delegator_item>>(resp.delegator_list);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::validator_detailed_item& resp) {
    j = nlohmann::json{
        {"public_key", resp.pub_key},
        {"status", resp.status},
        {"stake", resp.stake},
        {"part", resp.part},
        {"meta", resp.meta},
        {"delegator_count", resp.delegator_count},
        {"delegator_list", resp.delegator_list},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::net_status& resp) {
    if (j.find("avg_block_time") != j.end() && !j.at("avg_block_time").is_null())
        j.at("avg_block_time").get_to<double>(resp.avg_block_time);
    if (j.find("bip_price_change") != j.end() && !j.at("bip_price_change").is_null())
        j.at("bip_price_change").get_to<double>(resp.bip_price_change);
    if (j.find("bip_price_usd") != j.end() && !j.at("bip_price_usd").is_null())
        j.at("bip_price_usd").get_to<double>(resp.bip_price_usd);
    if (j.find("latest_block_height") != j.end() && !j.at("latest_block_height").is_null())
        j.at("latest_block_height").get_to<dev::bigint>(resp.latest_block_height);
    if (j.find("market_cap") != j.end() && !j.at("market_cap").is_null())
        j.at("market_cap").get_to<double>(resp.market_cap);
    if (j.find("total_transactions") != j.end() && !j.at("total_transactions").is_null())
        j.at("total_transactions").get_to<dev::bigint>(resp.total_txn);
    if (j.find("transactions_per_second") != j.end() && !j.at("transactions_per_second").is_null())
        j.at("transactions_per_second").get_to<double>(resp.tx_per_second);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::net_status& resp) {
    j = nlohmann::json{
        {"avg_block_time", resp.avg_block_time},
        {"bip_price_change", resp.bip_price_change},
        {"bip_price_usd", resp.bip_price_usd},
        {"latest_block_height", resp.latest_block_height},
        {"market_cap", resp.market_cap},
        {"total_transactions", resp.total_txn},
        {"transactions_per_second", resp.tx_per_second},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::net_status_page& resp) {
    if (j.find("active_candidates") != j.end() && !j.at("active_candidates").is_null())
        j.at("active_candidates").get_to<uint64_t>(resp.active_candidates);
    if (j.find("active_validators") != j.end() && !j.at("active_validators").is_null())
        j.at("active_validators").get_to<uint64_t>(resp.active_validators);
    if (j.find("avg_transaction_commission") != j.end() && !j.at("avg_transaction_commission").is_null())
        j.at("avg_transaction_commission").get_to<dev::bigdec18>(resp.avg_tx_commission);
    if (j.find("bip_emission") != j.end() && !j.at("bip_emission").is_null())
        j.at("bip_emission").get_to<dev::bigint>(resp.bip_emission);
    if (j.find("block_speed_24h") != j.end() && !j.at("block_speed_24h").is_null())
        j.at("block_speed_24h").get_to<dev::bigdec18>(resp.block_speed_24h);
    if (j.find("blocks_count") != j.end() && !j.at("blocks_count").is_null())
        j.at("blocks_count").get_to<uint64_t>(resp.blocks_count);
    if (j.find("custom_coins_count") != j.end() && !j.at("custom_coins_count").is_null())
        j.at("custom_coins_count").get_to<uint64_t>(resp.custom_coins_count);
    if (j.find("delegators_count") != j.end() && !j.at("delegators_count").is_null())
        j.at("delegators_count").get_to<uint64_t>(resp.delegators_count);
    if (j.find("custom_coins_sum") != j.end() && !j.at("custom_coins_sum").is_null())
        j.at("custom_coins_sum").get_to<dev::bigdec18>(resp.custom_coins_sum);
    if (j.find("free_float_bip") != j.end() && !j.at("free_float_bip").is_null())
        j.at("free_float_bip").get_to<dev::bigdec18>(resp.free_float_bip);
    if (j.find("non_zero_addresses_count") != j.end() && !j.at("non_zero_addresses_count").is_null())
        j.at("non_zero_addresses_count").get_to<uint64_t>(resp.non_zero_addresses_count);
    if (j.find("pools_count") != j.end() && !j.at("pools_count").is_null())
        j.at("pools_count").get_to<uint64_t>(resp.pools_count);
    if (j.find("status") != j.end() && !j.at("status").is_null())
        j.at("status").get_to<std::string>(resp.status);
    if (j.find("total_commission") != j.end() && !j.at("total_commission").is_null())
        j.at("total_commission").get_to<dev::bigdec18>(resp.total_commission);
    if (j.find("total_delegated_bip") != j.end() && !j.at("total_delegated_bip").is_null())
        j.at("total_delegated_bip").get_to<dev::bigdec18>(resp.total_delegated_bip);
    if (j.find("transaction_count_24h") != j.end() && !j.at("transaction_count_24h").is_null())
        j.at("transaction_count_24h").get_to<dev::bigint>(resp.tx_24h_count);
    if (j.find("transactions_per_second") != j.end() && !j.at("transactions_per_second").is_null())
        j.at("transactions_per_second").get_to<dev::bigdec18>(resp.tx_per_second);
    if (j.find("transactions_total") != j.end() && !j.at("transactions_total").is_null())
        j.at("transactions_total").get_to<dev::bigint>(resp.total_txn);
    if (j.find("uptime") != j.end() && !j.at("uptime").is_null())
        j.at("uptime").get_to<double>(resp.uptime);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::net_status_page& resp) {
    j = nlohmann::json{
        {"active_candidates", resp.active_candidates},
        {"active_validators", resp.active_validators},
        {"avg_transaction_commission", resp.avg_tx_commission},
        {"bip_emission", resp.bip_emission},
        {"block_speed_24h", resp.block_speed_24h},
        {"blocks_count", resp.blocks_count},
        {"custom_coins_count", resp.custom_coins_count},
        {"delegators_count", resp.delegators_count},
        {"custom_coins_sum", resp.custom_coins_sum},
        {"free_float_bip", resp.free_float_bip},
        {"non_zero_addresses_count", resp.non_zero_addresses_count},
        {"pools_count", resp.pools_count},
        {"status", resp.status},
        {"total_commission", resp.total_commission},
        {"total_delegated_bip", resp.total_delegated_bip},
        {"transaction_count_24h", resp.tx_24h_count},
        {"transactions_per_second", resp.tx_per_second},
        {"transactions_total", resp.total_txn},
        {"uptime", resp.uptime},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::pool& resp) {
    if (j.find("coin0") != j.end() && !j.at("coin0").is_null())
        j.at("coin0").get_to<minter::explorer::coin_item_base>(resp.coin0);
    if (j.find("coin1") != j.end() && !j.at("coin1").is_null())
        j.at("coin1").get_to<minter::explorer::coin_item_base>(resp.coin1);
    if (j.find("amount0") != j.end() && !j.at("amount0").is_null())
        j.at("amount0").get_to<dev::bigdec18>(resp.amount0);
    if (j.find("amount1") != j.end() && !j.at("amount1").is_null())
        j.at("amount1").get_to<dev::bigdec18>(resp.amount1);
    if (j.find("liquidity") != j.end() && !j.at("liquidity").is_null())
        j.at("liquidity").get_to<dev::bigdec18>(resp.liquidity);
    if (j.find("liquidity_bip") != j.end() && !j.at("liquidity_bip").is_null())
        j.at("liquidity_bip").get_to<dev::bigdec18>(resp.liquidity_bip);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::pool& resp) {
    j = nlohmann::json{
        {"coin0", resp.coin0},
        {"coin1", resp.coin1},
        {"amount0", resp.amount0},
        {"amount1", resp.amount1},
        {"liquidity", resp.liquidity},
        {"liquidity_bip", resp.liquidity_bip},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::pool_provider& resp) {
    if (j.find("address") != j.end() && !j.at("address").is_null())
        j.at("address").get_to<minter::address_t>(resp.address);
    if (j.find("coin0") != j.end() && !j.at("coin0").is_null())
        j.at("coin0").get_to<minter::explorer::coin_item_base>(resp.coin0);
    if (j.find("coin1") != j.end() && !j.at("coin1").is_null())
        j.at("coin1").get_to<minter::explorer::coin_item_base>(resp.coin1);
    if (j.find("token") != j.end() && !j.at("token").is_null())
        j.at("token").get_to<minter::explorer::coin_item_base>(resp.token);
    if (j.find("amount0") != j.end() && !j.at("amount0").is_null())
        j.at("amount0").get_to<dev::bigdec18>(resp.amount0);
    if (j.find("amount1") != j.end() && !j.at("amount1").is_null())
        j.at("amount1").get_to<dev::bigdec18>(resp.amount1);
    if (j.find("liquidity") != j.end() && !j.at("liquidity").is_null())
        j.at("liquidity").get_to<dev::bigdec18>(resp.liquidity);
    if (j.find("liquidity_share") != j.end() && !j.at("liquidity_share").is_null())
        j.at("liquidity_share").get_to<dev::bigdec18>(resp.liquidity_share);
    if (j.find("liquidity_bip") != j.end() && !j.at("liquidity_bip").is_null())
        j.at("liquidity_bip").get_to<dev::bigdec18>(resp.liquidity_bip);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::pool_provider& resp) {
    j = nlohmann::json{
        {"address", resp.address},
        {"coin0", resp.coin0},
        {"coin1", resp.coin1},
        {"token", resp.token},
        {"amount0", resp.amount0},
        {"amount1", resp.amount1},
        {"liquidity", resp.liquidity},
        {"liquidity_share", resp.liquidity_share},
        {"liquidity_bip", resp.liquidity_bip},
    };
}
void ::minter::explorer::from_json(const nlohmann::json& j, ::minter::explorer::pool_route& resp) {
    if (j.find("error") != j.end() && !j.at("error").is_null())
        j.at("error").get_to<minter::gate::error_result>(resp.error);
    if (j.find("swap_type") != j.end() && !j.at("swap_type").is_null())
        j.at("swap_type").get_to<minter::gate::estimate_swap_from>(resp.swap_type);
    if (j.find("amount_in") != j.end() && !j.at("amount_in").is_null())
        j.at("amount_in").get_to<dev::bigdec18>(resp.amount_in);
    if (j.find("amount_out") != j.end() && !j.at("amount_out").is_null())
        j.at("amount_out").get_to<dev::bigdec18>(resp.amount_out);
    if (j.find("coins") != j.end() && !j.at("coins").is_null())
        j.at("coins").get_to<std::vector<minter::explorer::coin_item_base>>(resp.coins);
}
void ::minter::explorer::to_json(nlohmann::json& j, const ::minter::explorer::pool_route& resp) {
    j = nlohmann::json{
        {"error", resp.error},
        {"swap_type", resp.swap_type},
        {"amount_in", resp.amount_in},
        {"amount_out", resp.amount_out},
        {"coins", resp.coins},
    };
}